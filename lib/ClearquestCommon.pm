package ClearquestCommon;use strict;use warnings;use Log::Log4perl qw(:easy);use vars qw($VERSION @EXPORT_OK @ISA @EXPORT);require Exporter;@ISA       = qw(Exporter);@EXPORT    = qw();@EXPORT_OK = qw(buildReleasesList getLatestRelease getIntermediateReleases);$VERSION = sprintf('%d.%02d', (q$Revision: 1.15 $ =~ /\d+/g));sub buildReleasesList {	my $file = shift;	$file = getSharedDirectory().$file;		ERROR "List of releases cannot be retrieved in $file" and return undef unless -r $file;	open FILE,"$file";	my @orderedReleases;	foreach my $release (<FILE>) {		$release =~ s/\s*(\S*)\s*/$1/;		push (@orderedReleases, $release);	}	close FILE;	my $i = 1;	my %equivTable = map { $_ => $i++ } @orderedReleases;		my %releaseList;	$releaseList{hash} = \%equivTable;	$releaseList{array} = \@orderedReleases;	$releaseList{count} = scalar(@orderedReleases);		return \%releaseList;}sub getLatestRelease {	my $refReleaseList = shift;	my $index = $refReleaseList->{count};	foreach my $release (@_) {		LOGDIE "Release \"$release\" is an unknown release" unless $refReleaseList->{hash}{$release};		$index = $refReleaseList->{hash}{$release} if $refReleaseList->{hash}{$release}  < $index;	}	return $refReleaseList->{array}->[$index-1];}sub getIntermediateReleases {	my ($lowerRelease, $upperRelease) = @_;	LOGDIE "Release \"$lowerRelease\" is an unknown release" unless $test{$lowerRelease};	LOGDIE "Release \"$upperRelease\" is an unknown release" unless $test{$upperRelease};	my $index = $test{$upperRelease};	my $upperIndex = $test{$lowerRelease};	LOGDIE "Upper Release \"$upperRelease\" is not the latest" if $upperIndex < $index;		my @list;	while ($index <= $upperIndex) {		push(@list, $orderedReleases[$index-1]);		$index++;	}	return [reverse @list];}sub getNewerReleases {	my ($refRelease) = @_;	LOGDIE "Release \"$refRelease\" is an unknown release" unless $test{$refRelease};	my $refIndex = $test{$refRelease};		my @list;	my $index = 1;	while ($index < $refIndex) {		push(@list, $orderedReleases[$index-1]);		$index++;	}	return [reverse @list];}1;